Exercise 0 - obtaining Vampire:
-------------------------------

The source code of Vampire is available at 

https://github.com/vprover/vampire

for evaluation and research purposes (see LICENCE there for more details).

Full official vampire, that we will be using, requires the SMT solver Z3 as a library.

Z3 has been pre-installed on the provided VM. 

(In general, make sure there is sub-directory "include" of your "vampire" directory
and that it contains (a link to) the z3 library file "libz3.so" (unix) / "libz3.dylib" (mac).
In might be necessary to also make LD_LIBRARY_PATH (unix) / DYLD_LIBRARY_PATH (mac) contain the path
the this vampire's "include" dir.)

--- on the provided VM ---

- start the Terminal
- cd vampire
- git pull
- make vampire_z3_rel -j 3

should give us (as of 5 July 2018) vampire_z3_rel_master_3993


Exercise 1 - Limited Resource Strategy (LRS) and the time limit
---------------------------------------------------------------

Under certain conditions, LRS may behave in surprising ways. Because it actively discards
clauses which are estimated not to be useful before the allotted time is over, it may
prove things faster when given less time. Try running

./vampire_z3_rel_master_3993 -awr 5:1 -fsr off ../satsmtar2018/GRP140-1.p

Note that:
- LRS is on by default (otherwise "-sa lrs")
- "-awr 5:1 -fsr off" (age weight ration and forward subsumption resolution) are set to non-default to enable the desired effect

Now give Vampire less time (than the default 60s) with the option "-t 30", "-t 15", ... "-t 15d" (for 15 deciseconds = 1.5s)

What is the shortest time under which vampire finds a refutation?


Exercise 2 - A bit of group theory and finite model finding
-----------------------------------------------------------

Let's play a bit with the problem "grp_ord2.p" 

1) just let Vampire prove it and try understanding the proof.

./vampire_z3_rel_master_3993 ../satsmtar2018/grp_ord2.p 

2) Comment out the conjecture and run Vampire again as above.

What is it doing? Will it terminate?

Try adding "--show_active on" to see what clause is currently being activated.

Try adding "--show_new on" to see what clauses are getting generated.

ANSWER: It is saturating a satisfiable set of axioms. In theory, it might not terminate at all. 
Although there are cases of finite saturations. (Complete calculus + finite saturation -> problem shown satisfiable.)
We cannot be sure after finitely many steps. (By the way, here we are running with the default time limit of 60s.)

3) Without the conjecture, the problem is satisfiable, however saturation-based approaches are not very good at detecting it!
Let's try finite model building by adding "-sa fmb" 
(yes, the value "fmb" occurs under "saturation strategy", but as a technology, it has nothing to do with saturation).

What did we get? 

ANSWER: Finite model builder constructed a THE one element group (in which every element is of order 2).

4) Can you add an axiom to make Vampire looking for larger models?

ANSWER: For instance, add 

fof(a,axiom,a!=e).

adding an extra constant "a" to the problem and stating it's not equal to the unit element "e".

5) Can you add axioms to force Vampire look for a group (in which every element is of order 2) of size exactly three?

ANSWER:

Add, for instance, 

fof(a,axiom,$distinct(a,b,c)).
fof(a,axiom,![X]:(X = a | X = b | X = c)).

Note that "$distinct(a,b,c)" is a shorthand for "a!=b & b!=c & a!=c".

Note that Vampire starts checking from size 3 as it noticed that 1 and 2 wouldn't work anyway.
Then after trying size 4 realises there cannot be any model and concludes "$false [finite model not found]"

The ability to show problems unsatisfiable using finite model building is a bit fancy. See our paper
"Finding Finite Models in Multi-sorted First-Order Logic. SAT 2016" if interested.

6) Actually, there is no group (in which every element is of order 2) which would have size 3. But it's pretty hard to prove by superposition / saturation.

The default strategy as in

"./vampire_z3_rel_master_3993 ../satsmtar2018/grp_ord2.p"

will have a hard time.

Adding "--mode casc" (instead of "-sa fmb") will employ Vampire's powerful strategy schedule and maybe find a suitable strategy to solve this hard(ish) problem. 

An extra challenge: try understanding the proof!


Exercise 3 - Challenge: Can you find the right strategy?
--------------------------------------------------------

This exercise has been constructed to annoy you! Also to demonstrate 
- how fragile search spaces in first-order logic are. Often we have problems that a certain strategy solves almost instantly, 
while another will not terminate in reasonable time.
- how useful incomplete strategies can be. In the theory talks you have heard that the developers of first-order theorem provers 
like calculi that are complete. Well, if you want to win competitions, take inspiration from Vampire and also employ incomplete ones.
Some our really powerful and help us solve problems which we cannot solve otherwise!

In the slides you have already seen some suggestions on how to obtain interesting strategies different from the default strategy of Vampire. They were obtained by

- turning on the set of support strategy via "-sos on" (this is an incomplete but a very useful strategy!)

- turning off avatar via "-av off" (we solver fewer problems, but there are some which we cannot solve with avatar)

- switching the saturation strategy from the default LRS to discount
  and also adjusting the age weight ratio for this strategy via "-sa discount -awr 10"

- using an incomplete but powerful Lookahead literal selection via "-s 1011"
(see "Selecting the Selection. IJCAR 2016" for more details)
 
- turning on the relatively expensive but often useful reduction called Backward subsumption via "-bs on".

Including the default strategy, this represent 6 distinct strategies for Vampire.

In the folder ./challenge/ you find 6 files that have been selected such that exactly one of the above strategies succeeds on each of the problems.

TASK: Can you find which strategy solves which problem?

(By the way, feel free to look at the problems themselves to see what they encode.
They have been selected to also demonstrate the variability of the TPTP library.)

---

So we have many strategies and only some work for certain problems. Could we guess/predict which strategy will solve which problem?

The general answer is: sadly, no. 

People try, it looks like a perfect application of machine learning, but so far there weren't convincing results.

The Vampire lore is "if a strategy isn't solving your problem, go and try another one!"

This leads us to strategy scheduling and the so called CASC mode in Vampire. 

Try running 

"./vampire_z3_rel_master_3993 --mode casc"

on the challenge problems. The only one which looks challenging for casc mode seems to be:

NUM506+3.p

because it takes Vampire a considerably long time to try a successful strategy. 
(On our machine,) it is only the 12th selected strategy which solves the problem, 
but then still under 5 seconds.

This can be sped up by using more than once core via "--cores 3".


Exercise 4 - Theories in Vampire, theory axioms, SMTLIB input
-------------------------------------------------------------

Vampire can handle the (quantified) theories of (integer/real linear/non-linear) arithmetic, arrays, and datatypes. We do this in various ways with the main ones being (i) simple rewriting/evaluation, (ii) the addition of theory axioms, and (iii) the use of the z3 SMT solver within AVATAR.

We also support the SMT-LIB input format (but I’m going to stay in TPTP for a bit).

1) To see what can happen with evaluation try running Vampire in default mode on theory1.p which is

tff(f,type,f:$int*$int>$real).
tff(a,type,a:$real).
tff(f,axiom, ![X:$int,Y:$int] : f(X,Y) = $divide($to_real($sum(X,Y)),2.0)).
tff(a,axiom, $sum(a,-1.5)=4.0).
tff(a,conjecture, f(5,6) = a)..

Here we first declare the types of some symbols. We then define f to be a function that averages two numbers and a to be 5.5 in some odd way. Running Vampire should give a proof containing 5 evaluation steps, can you see what is happening on each step? If we didn’t have these evaluation steps could we emulate them using some general axiom of arithmetic?

2) We now have an example where we need more than evaluation. Open theory2.p, what is it defining? Run Vampire in default mode, which theory axioms do we need in the proof? 

Could we use a smaller set of theory axioms (note that a theory axiom is just a theorem of the theory) - hint, Vampire’s proof output marks clauses with TD if they are a generated purely from theory axioms. To check your answer try adding some theory axioms directly to theory2.p and run Vampire without theory axioms by adding the option -tha off.

3) But what about using z3, how can that help. Take a look at theory3.p. The first two clauses imply q(5) and the next two imply a=5, so together they imply q(a). Now try running Vampire on theory3.p, what happens?

Now try running Vampire with the option -sas z3 (which sets z3 as the solver in AVATAR).

4) The next (optional) exercise is to take one of theory1, theory2, or theory3 and translate it to SMT-LIB. Once you’ve done this you can run Vampire using —input_language smtlib2 and everything else should look the same.


Exercise 5 - Two new options for theory reasoning
------------------------------------------------

Let’s have a look at the at an apparently easy problem ./MSC023\=2.p

Run Vampire on this problem using the options we met in the previous exercise (-tha off/on, -sas z3), can we solve it?

Why not? Try running Vampire with -tha off --show_new on. We get two clauses and we really want to resolve them.

Now try running with -uwa all. Vampire can now solve it. What have we done?

theory4
-thi all






- sine ?
- large things?
- cite paper!





Modelling - do a Hilbert calculus thing?

Exercise ? - Smtlib
-------------------

Vampire can also solve problems in the SMTLib format. The problem javafe.parser.ParseStmt.002.smt2 comes
from software verification and is contained in the SMTLib Benchmarks ( http://smtlib.cs.uiowa.edu/benchmarks.shtml ).

Just running

"./vampire_z3_rel_master_3993 --input_syntax smtlib2 javafe.parser.ParseStmt.002.smt2"

does not find a proof in decent time. The reason is that knowing the goal helps Vampire significantly. In case the goal
is unknown it provides an option to guess what the goal is. Adding the option -gtg all lets us solve this problem.

"./vampire_z3_rel_master_3993 --input_syntax smtlib2 -gtg all javafe.parser.ParseStmt.002.smt2"






Exercise 5 - Modelling problems in first-order logic and the Question answering mode 
------------------------------------------------------------------------------------

Do you know the puzzle Crossing the River (with a Wolf, a Goat, and a Cabbage)? 
You can check it out, e.g., at http://www.mathcats.com/explore/river/crossing.html

Can you formalise in first-order logic such that whenever Vampire finds a proof
there is a solution to the puzzle? Try it yourself before you proceed!

Possible solution can be found in "./PUZ047variant.p" 
(it was derived by modifying the official TPTP problem http://www.cs.miami.edu/~tptp/cgi-bin/SeeTPTP?Category=Problems&Domain=PUZ&File=PUZ047+1.p)

Notice that the conjecture is an existentially quantified formula, where the variable Z essentially stands for the solution. 
In such cases, Vampire can be instructed to automatically extract the value of the solution from any successful refutation.
This is called the Question Answering mode. To try this, you can run 

"./vampire_z3_rel_master_3993 ../satsmtar2018/PUZ047variant.p -qa answer_literal -av off"

(currently, question answering is incompatible with AVATAR.)

Notice the output line:

% SZS status Theorem for PUZ047variant
% SZS answers Tuple [[take_goat(go_alone(take_wolf(take_goat(take_cabbage(go_alone(take_goat(start)))))))]|_] for PUZ047variant

which encodes the solution.

For more details, check out Giles' paper: "Revisiting Question Answering in Vampire, VW 2017" (https://easychair.org/publications/open/5L6q).


Exercise 6 - Interpolation in Vampire
-------------------------------------

Interpolation is an advanced topic that will only be covered after this practical session. 

Here we provide a set of problems (see ./interpolation/*.p) that demonstrate the use of interpolation in Vampire.
The examples are written in a vampire-specific extension of TPTP that allows encoding interpolation-related information.

Let's have a look at Ex0_BasicConflict.p 

The construct

vampire(option,<option_name>,<value>).

is a way of setting Vampire options from an input file rather than, as usual, from the command line.
Here we use it to:

vampire(option,avatar,off).

turn off the avatar architecture, which is not yet fully compatible with interpolation,

vampire(option,show_interpolant,new_heur).

tell Vampire to generate and show interpolants when it proves the formula.

Interpolation in our settings is the following task. Given a `left' formula L, a `right' formula R, and possibly a set of background axioms A,
provided "L /\ R /\ A" is unsatisfiable, come up with an interpolant I, a formula satisfying
1) A /\ L => I,
2) A /\ I /\ R is unsatisfiable,
3) I does not contain symbols specific to L or R.

We need to tell Vampire which symbols are specific to L and R as in:

vampire(symbol,function,z,0,left).

which declares a new function "z" of arity 0, i.e. a constant, and marks it as belonging to the left formula.

Finally, 

vampire(left_formula).
  fof(fA,hypothesis,p(z)).
vampire(end_formula).

declares left formula itself and similarly

vampire(right_formula).
  fof(fB, hypothesis,![X]:~p(X)).
vampire(end_formula).

the right one. Note that there can be more than one fof(...) construct between the respective 

vampire(left_formula/right_fomrula). / vampire(end_formula).

"brackets".

In this example, Vampire finds the obvious trivial refutation and comes up with the interpolant

! [X0] : ~p(X0) => $false

which is minimised and simplified to

?[X0] : (p(X0))

Intuitively this existential formula summarises the left formula "p(z)" without mentioning the forbidden constant z.

---

We move our attention to example Ex0_BasicConflict_NoLocalProof.p. 

This is a slightly more complicated version of the previous example which demonstrates the limits of the interpolation method.
To produce interpolants, Vampire restricts its proof search to so called local proofs 
(proofs that don't ``mix'' special symbols such as the "z" above). 
To generate only local proofs certain inferences need to be blocked which leads to the loss of completeness. 

This is actually inherent, as it can be shown that sometimes, as in the case of this example, local proofs simply do not exits.

We see that Vampire terminates with the message:

% Refutation not found, inferences skipped due to colors

If we comment out the declaration:

vampire(symbol,function,c,0,left).

Vampire finds a proof, but the corresponding "interpolant"

(![X0] : (p(c,X0)))

still mentions the forbidden constant "c".

---

For more information on interpolation in Vampire, check out:
"Interpolation and Symbol Elimination. CADE 2009", 
"Playing in the grey area of proofs. POPL 2012",
"Splitting Proofs for Interpolation. CADE 2017", 
and "First-Order Interpolation and Interpolating Proof Systems. LPAR 2017".

---

Enjoy exploring the other examples in the directory "./interpolation".

